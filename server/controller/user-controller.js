const User = require('../model/User');
require('dotenv').config()
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

exports.getAllUsers = async (req, res) => {
    const allUsers = await User.find();
    res.status(200).json({ allUsers })
}

exports.signup = async (req, res) => {
    try {
        const { name, username, email, password } = req.body;

        //checking if user already registered
        const checkUser = await User.findOne({ $or: [{ email: email }, { username: username }] })
        if (checkUser) {
            return res.status(401).json({ msg: "Username / email already registered" })
        }

        const encry_password = bcrypt.hashSync(password);
        const addUser = new User({
            name: name,
            username: username,
            email: email,
            password: encry_password,
        })
        try {
            await addUser.save();
            res.status(201).json({
                name: addUser.name,
                username: addUser.username,
                email: addUser.email,
                token: generateToken(addUser._id)
            })
        } catch (error) {
            res.status(500).json({ msg: "Error creating" })
        }


    } catch (err) {
        res.status(500).json({ msg: err.message })
    }

}

exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const checkUser = await User.findOne({ email: email })
        if (!checkUser) {
            return res.status(404).json({ msg: "User Doesn't Exists" })
        }
        if (bcrypt.compareSync(password, checkUser.password)) {

            res.status(200).json({
                id: checkUser._id,
                name: checkUser.name,
                username: checkUser.username,
                email: checkUser.email,
                token: generateToken(checkUser._id)                //return a token generated by JWT
            })
        } else {
            res.status(400).json({ msg: "Password doesn't Match" })
        }
    } catch (err) {
        res.status(201).json({ msg: err.message })
    }

}

exports.getMe = async (req, res) => {
    res.status(200).json(req.user);
}

//GENERATE JWT TOKEN which epires in 30 days
const generateToken = (id) => {
    return jwt.sign({ id }, process.env.JWT_SECRET, {
        expiresIn: "30d"
    })
}
